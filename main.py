import os
from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, ContextTypes
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import uvicorn

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = "8162219271:AAEhKmeNRLzORbDwXyLKH4tbUMMmtU-ypsw"
CRYPTOBOT_INVOICE = "IVGMYQSAqfgn"
CRYPTOBOT_LINK = f"https://t.me/send?start={CRYPTOBOT_INVOICE}"
ADMIN_ID = 427325039
FILE_PATH = "app/example.txt"

telegram_app = Application.builder().token(TOKEN).build()
fastapi_app = FastAPI()
received_users = set()

# === Telegram Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=CRYPTOBOT_LINK)],
        [InlineKeyboardButton("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!", reply_markup=keyboard)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "support":
        await query.edit_message_text("üì© –ü–∏—à–∏ –Ω–∞ –ø–æ—á—Ç—É: a7xspurius@gmail.com")
    elif query.data == "about":
        await query.edit_message_text("–£ –∫–∞–¥–∂–∏—Ç–∞ –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∫—É–º–∞.")

# === FastAPI Webhook ===
@fastapi_app.post("/webhook")
async def payment_webhook(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    invoice_id = data.get("invoice_id")

    if invoice_id != CRYPTOBOT_INVOICE:
        return JSONResponse(content={"status": "ignored"}, status_code=200)

    if user_id in received_users:
        return JSONResponse(content={"status": "already_received"}, status_code=200)

    received_users.add(user_id)

    try:
        file = InputFile(FILE_PATH)
        await telegram_app.bot.send_document(chat_id=user_id, document=file, caption="üìÑ –õ–æ–≤–∏ —Ñ–∞–π–ª")
        await telegram_app.bot.send_message(chat_id=ADMIN_ID, text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞: {user_id}")
    except Exception as e:
        await telegram_app.bot.send_message(chat_id=ADMIN_ID, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return JSONResponse(content={"status": "error"}, status_code=500)

    return JSONResponse(content={"status": "ok"}, status_code=200)

def setup_telegram_handlers():
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CallbackQueryHandler(button_callback))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    telegram_app.add_handler(MessageHandler(filters.COMMAND, unknown))

setup_telegram_handlers()

@fastapi_app.on_event("startup")
async def startup_event():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    await telegram_app.initialize()
    await telegram_app.start()
    await telegram_app.updater.start_polling()

@fastapi_app.on_event("shutdown")
async def shutdown_event():
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram-–±–æ—Ç–∞
    await telegram_app.updater.stop()
    await telegram_app.shutdown()

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(fastapi_app, host="0.0.0.0", port=port, log_level="info")
