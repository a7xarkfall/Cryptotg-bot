
import asyncio
import os
from fastapi import FastAPI, Request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

TOKEN = "8162219271:AAEhKmeNRLzORbDwXyLKH4tbUMMmtU-ypsw"
CRYPTOBOT_LINK = "https://t.me/send?start=IVGMYQSAqfgn"
EXPECTED_PAYLOAD = "IVGMYQSAqfgn"
ADMIN_ID = 519105945  # @a7xark

FILE_PATH = "app/example.txt"
GIF_PATH = "app/success.gif"
LOG_FILE = "app/paid_users.txt"

app = FastAPI()
bot = Bot(token=TOKEN)
telegram_app = Application.builder().token(TOKEN).build()


def user_already_received(user_id):
    if not os.path.exists(LOG_FILE):
        return False
    with open(LOG_FILE, "r") as f:
        return str(user_id) in f.read()


def log_user(user_id):
    with open(LOG_FILE, "a") as f:
        f.write(f"{user_id}\n")


@app.post("/crypto-webhook")
async def crypto_webhook(request: Request):
    try:
        data = await request.json()
        print("üî• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç CryptoBot:", data)

        if data.get("event") == "payment" and data.get("status") == "success":
            payload = data.get("invoice_payload")
            telegram_id = data.get("user", {}).get("telegram_id")
            username = data.get("user", {}).get("username", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            if payload == EXPECTED_PAYLOAD and telegram_id:
                await bot.send_message(chat_id=ADMIN_ID, text=f"üí∏ –û–ø–ª–∞—Ç–∞ –æ—Ç @{username} (ID: {telegram_id}) –ø–æ–ª—É—á–µ–Ω–∞!")

                if user_already_received(telegram_id):
                    await bot.send_message(chat_id=telegram_id, text="üìÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Ñ–∞–π–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")
                else:
                    if os.path.exists(FILE_PATH):
                        await bot.send_document(chat_id=telegram_id, document=InputFile(FILE_PATH),
                                                caption="üìÑ –õ–æ–≤–∏ —Å–≤–æ–π –ø—Ä–∏–∑, –∫–æ–≤–±–æ–π ü§†")

                        if os.path.exists(GIF_PATH):
                            with open(GIF_PATH, "rb") as gif:
                                await bot.send_animation(chat_id=telegram_id, animation=gif, caption="üéâ –í–µ–ª–∏–∫–∏–π —É—Å–ø–µ—Ö!")

                        log_user(telegram_id)
                    else:
                        await bot.send_message(chat_id=telegram_id, text="‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        return {"ok": True}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return {"error": str(e)}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await menu(update, context)


async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="pay"),
         InlineKeyboardButton("üìÅ –ü–æ–ª—É—á–∏—Ç—å", callback_data="get")],
        [InlineKeyboardButton("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
         InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "pay":
        keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 0.1 USDT (ERC-20)", url=CRYPTOBOT_LINK)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 0.1 USDT —á–µ—Ä–µ–∑ CryptoBot. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ñ–∞–π–ª –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                                      reply_markup=reply_markup)

    elif query.data == "get":
        telegram_id = query.from_user.id
        if user_already_received(telegram_id):
            await bot.send_document(chat_id=telegram_id, document=InputFile(FILE_PATH),
                                    caption="üìÑ –õ–æ–≤–∏ —Å–≤–æ–π –ø—Ä–∏–∑, –∫–æ–≤–±–æ–π ü§†")
        else:
            await bot.send_message(chat_id=telegram_id, text="‚ùå –í—ã –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–ª–∏. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª.")

    elif query.data == "support":
        await query.edit_message_text("üì© –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –Ω–∞: a7xspurius@gmail.com")

    elif query.data == "about":
        await query.edit_message_text("–£ –∫–∞–¥–∂–∏—Ç–∞ –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∫—É–º–∞, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –º–æ–Ω–µ—Ç—ã –¥–ª—è –∫–∞–¥–∂–∏—Ç–∞, –¥—Ä—É–≥ üòº")


async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üòÖ")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("app/rickroll.mp4", "rb") as video:
            await update.message.reply_video(video, caption="üé∂ –ù–∏–∫–æ–≥–¥–∞ —Ç–µ–±—è –Ω–µ –ø–æ–¥–≤–µ–¥—É...")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")


telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CommandHandler("menu", menu))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
telegram_app.add_handler(MessageHandler(filters.COMMAND, unknown))
telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))


async def main():
    tg_task = telegram_app.run_polling(allowed_updates=Update.ALL_TYPES, close_loop=False)
    await tg_task


if __name__ == "__main__":
    asyncio.run(main())
