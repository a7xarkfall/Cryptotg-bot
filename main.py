import os
import asyncio
import uvicorn

from telegram.ext import CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, ContextTypes
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse

# === Configuration ===
TOKEN = "8162219271:AAEhKmeNRLzORbDwXyLKH4tbUMMmtU-ypsw"
CRYPTOBOT_INVOICE = "IVGMYQSAqfgn"
CRYPTOBOT_LINK = f"https://t.me/send?start={CRYPTOBOT_INVOICE}"
ADMIN_ID = 427325039
FILE_PATH = "app/example.txt"

telegram_app = Application.builder().token(TOKEN).build()
fastapi_app = FastAPI()
received_users = set()

# === Telegram Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", callback_data="get_file")],
        [InlineKeyboardButton("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ])
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–Ω–∏–∫! üßô‚Äç‚ôÇÔ∏è\n\n"
        "–Ø –∫–∞–¥–∂–∏—Ç-–±–æ—Ç. –¢—É—Ç –º–æ–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç—ã –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã.\n\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚§µÔ∏è",
        reply_markup=main_keyboard
    )

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    main_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÅ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", callback_data="get_file")],
        [InlineKeyboardButton("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")]
    ])
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚§µÔ∏è",
        reply_markup=main_keyboard
    )

async def pay_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pay_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ‚Äî 0.1 USDT", url=CRYPTOBOT_LINK)]
    ])
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏ ‚¨áÔ∏è",
        reply_markup=pay_keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/pay - –û–ø–ª–∞—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n"
        "/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(help_text)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = (
        "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Ñ–∞–π–ª.\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    await update.message.reply_text(about_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "support":
        await query.edit_message_text(
            "üì© –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî –ø–∏—à–∏ –Ω–∞ –ø–æ—á—Ç—É:\n"
            "`a7xspurius@gmail.com`\n\n"
            "–ö–∞–¥–∂–∏—Ç –æ—Ç–≤–µ—Ç–∏—Ç, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∫–æ–Ω—á–∏—Ç —ç—Ç—É —Å–∫—É–º—É."
        )
    elif query.data == "about":
        await query.edit_message_text(
            "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–±–º–µ–Ω–∞ –∫—Ä–∏–ø—Ç–æ–º–æ–Ω–µ—Ç –Ω–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–≤–æ–π —Ñ–∞–π–ª.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
        )
    elif query.data == "get_file":
        if query.from_user.id in received_users:
            file = InputFile(FILE_PATH)
            await query.message.reply_document(document=file, caption="üìÑ –í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª, –∫–∞–∫ –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞–ª–∏—Å—å.")
        else:
            await query.message.reply_text("‚ùå –ù–µ—Ç –æ–ø–ª–∞—Ç—ã - –Ω–µ—Ç —Ç–æ–≤–∞—Ä–∞, –ø–ª–∞—Ç–∏!")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# === FastAPI Webhook for Payment Verification ===
@fastapi_app.post("/webhook")
async def payment_webhook(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    invoice_id = data.get("invoice_id")

    if invoice_id != CRYPTOBOT_INVOICE:
        return JSONResponse(content={"status": "ignored"}, status_code=200)
    if user_id in received_users:
        return JSONResponse(content={"status": "already_received"}, status_code=200)

    received_users.add(user_id)

    try:
        file = InputFile(FILE_PATH)
        await telegram_app.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n\n–í–æ—Ç —Ç–≤–æ–π —Ñ–∞–π–ª. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ ‚ú®"
        )
        await telegram_app.bot.send_document(
            chat_id=user_id,
            document=file,
            caption="üìÑ –õ–æ–≤–∏ —Ñ–∞–π–ª"
        )
        await telegram_app.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –æ—Ç —é–∑–µ—Ä–∞: {user_id}"
        )
    except Exception as e:
        await telegram_app.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"
        )
        return JSONResponse(content={"status": "error"}, status_code=500)

    return JSONResponse(content={"status": "ok"}, status_code=200)

def setup_telegram_handlers():
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("menu", menu_command))
    telegram_app.add_handler(CommandHandler("pay", pay_command))
    telegram_app.add_handler(CommandHandler("help", help_command))
    telegram_app.add_handler(CommandHandler("about", about_command))
    telegram_app.add_handler(CallbackQueryHandler(button_callback))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    telegram_app.add_handler(MessageHandler(filters.COMMAND, unknown))

setup_telegram_handlers()

# === Main Function ===
async def main():
    # Initialize and start Telegram bot
    await telegram_app.initialize()
    await telegram_app.start()
    # Remove any existing webhook to use polling
    await telegram_app.bot.delete_webhook()
    
    port = int(os.environ.get("PORT", 8000))
    config = uvicorn.Config(fastapi_app, host="0.0.0.0", port=port, log_level="info")
    server = uvicorn.Server(config)
    
    # Start Telegram polling as a background task and FastAPI server concurrently
    telegram_polling_task = asyncio.create_task(telegram_app.updater.start_polling())
    uvicorn_task = asyncio.create_task(server.serve())
    
    await asyncio.gather(telegram_polling_task, uvicorn_task)

if __name__ == "__main__":
    asyncio.run(main())
